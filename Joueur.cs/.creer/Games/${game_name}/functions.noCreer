<%
if not 'c#' in shared:
    shared['c#'] = {}

    def cs_escape(s):
        """
        Returns the ASCII decoded version of the given HTML string. This does
        NOT remove normal HTML tags like <p>.
        """
        htmlCodes = (
                ('>', '&gt;'),
                ('<', '&lt;')
            )
        for code in htmlCodes:
            s = s.replace(code[0], code[1])
        return s
    shared['c#']['escape'] = cs_escape

    def cs_default(type_obj, default=None):
        base_type = type_obj['name']
        if default == None:
            if base_type == "string":
                return '""'
            elif base_type == "list":
                return "new List<" + cs_type(type_obj['valueType']) + ">()"
            elif base_type == "dictionary":
                return 'new Dictionary<' + cs_type(type_obj['keyType']) + ", " + cs_type(type_obj['valueType']) + ">()"
            elif base_type == "int" or base_type == "float":
                return '0'
            elif base_type == "boolean":
                return 'false'
            else: # should be null and GameObjects
                return "null"
        else:
            return cs_value(type_obj, default)
    shared['c#']['default'] = cs_default

    def cs_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return str(default).lower()
        elif base_type == "int" or base_type == "float":
            return str(default)
        else:
            return "null"
    shared['c#']['value'] = cs_value

    def cs_type(type_obj):
        base_type = type_obj['name']
        if base_type == "list":
            return "IList<" + cs_type(type_obj['valueType']) + ">"
        elif base_type == "dictionary":
                return 'IDictionary<' + cs_type(type_obj['keyType']) + ", " + cs_type(type_obj['valueType']) + ">"
        elif base_type == "boolean":
            return "bool"
        elif base_type == "float":
            return "double"
        elif base_type == "int" or base_type == "null" or base_type == "string":
            return base_type
        else: # it's a game object, so include it's namespace
            return game_name + "." + base_type
    shared['c#']['type'] = cs_type

    def cs_args(arguments):
        to_join = []
        for argument in arguments:
            arg_str = cs_type(argument['type']) + " " + argument['name']
            if argument['optional']:
                arg_str += "=" + cs_value(argument['type'], argument['default'])
            to_join.append(arg_str)
        return ", ".join(to_join)
    shared['c#']['args'] = cs_args
%>